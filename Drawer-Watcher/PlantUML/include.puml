@startuml
class Brush <<struct>> {
    + Thickness : float <<get>> <<set>>
}
Brush --> "Color" Vector3
Brush --> "ClearColor" Color
Brush o-> "Default" Brush
class Player {
    + {static} ApplicationOwner : Player? <<get>>
    + IsAppOwner : bool <<get>>
    + ID : ushort <<get>>
    + Score : int <<get>> <<set>>
    + IsDrawer : bool <<get>>
    + IsInLobby : bool <<get>> <<set>>
    + Nickname : string <<get>> <<set>>
    + SetDrawerWithNotifyngServer(value:bool) : void
    + SetDrawer(value:bool) : void
    + Player(clientId:ushort, isDrawer:bool)
    + Update(isViewport:bool) : void
}
Player --> "CurrentBrush" Brush
Player o-> "_prevPoint" Vector2
Player o-> "_currPoint" Vector2
class GameLayer {
    + GameLayer()
    + <<override>> OnAttach() : void
    + <<override>> OnImGuiUpdate() : void
    + <<override>> OnUpdate(deltaTime:float) : void
    + <<override>> OnEvent() : bool
}
class Game {
    + Game()
}
class Program <<static>> {
    - {static} Main() : void
}
Layer <|-- GameLayer
Application <|-- Game
class ConnectionInfo <<struct>> {
    + Ip : string
    + Port : int
    + ConnectionInfo(ip:string, port:int)
    + <<const>> MaxConnection : int = 4
}
class GameData <<struct>> {
    + {static} Painting : RenderTexture? = null
    + Dispose() : void
}
class GameManager <<static>> {
    + {static} CurrentWord : string = ""
    + {static} Guesser : ushort = 0
    + {static} IsRoundEnded : bool = false
    + {static} IsGameStarted : bool = false
    + {static} GetRandomWord() : string
}
class Timer <<static>> {
    - {static} _timer : System.Timers.Timer?
    - {static} _onTimerEnds : Action?
    + {static} Enable : bool <<get>>
    + {static} CurrentTime : string = "0:00"
    + {static} Init() : void
    - {static} OnTimerElapsed(sender:object?, args:ElapsedEventArgs) : void
    + {static} Start(time:TimeSpan, onTimerEnds:Action) : void
    + {static} Stop() : void
}
ConnectionInfo o-> "Default" ConnectionInfo
ConnectionInfo o-> "Local" ConnectionInfo
IDisposable <|-- GameData
GameData o-> "ClearColor" Color
GameManager o-> "_random" Random
GameManager +-- Timer
Timer --> "_time" TimeSpan
enum MessageID {
    SendPainting= 1,
    ChatMessage,
    SameNick,
    StartGame,
    LobbyExit,
    NewWord,
    Timer,
    TimesUp,
    Winner,
    ConnectionInfo,
    ClientInfo,
    DrawerStatus,
    AllClear,
}
class NetworkLogger <<static>> {
    + {static} Init() : void
    - {static} Log(fmt:string) : void
}
class MessageHandlers <<static>> {
    - {static} Log(functionName:string, enumName:string, type:LogType) : void
    - {static} Log(message:string, type:LogType) : void
    + {static} SetDrawer(clientID:ushort, value:bool) : void
    + {static} SendLobbyExit() : void
    + {static} ClearPainting() : void
    + {static} SendDrawingData(start:Vector2, end:Vector2, thickness:float, color:Color) : void
    + {static} SendMessageInChat(senderID:ushort, text:string) : void
    + {static} SendNewWord() : void
    + {static} SendTime(time:string) : void
    + {static} SendTimesUp() : void
    + {static} SendOtherPlayersInfo(toClientId:ushort) : void
    - {static} HandleClientInfo(fromClientID:ushort, message:Message) : void
    - {static} HandleDrawerMessage(fromClientID:ushort, message:Message) : void
    - {static} HandleLobbyExit(fromClientID:ushort, message:Message) : void
    - {static} HandleAllClear(fromClientID:ushort, message:Message) : void
    - {static} HandlePainting(fromClientID:ushort, message:Message) : void
    - {static} HandleStartGame(fromClientID:ushort, message:Message) : void
    - {static} HandleChatMessage(fromClientID:ushort, message:Message) : void
    - {static} HandleWinner(fromClientID:ushort, message:Message) : void
    - {static} HandleNewWord(fromClientID:ushort, message:Message) : void
    - {static} HandleTimer(fromClientID:ushort, message:Message) : void
    - {static} HandleTimesUp(fromClientID:ushort, message:Message) : void
    - {static} HandleConnectionInfo(message:Message) : void
    - {static} HandleNewClientInfo(message:Message) : void
    - {static} HandleDrawerStatus(message:Message) : void
    - {static} HandleAllClear(_:Message) : void
    - {static} HandlePainting(message:Message) : void
    - {static} HandleChatMessage(message:Message) : void
    - {static} HandleWinner(message:Message) : void
    - {static} HandleNewWord(message:Message) : void
    - {static} HandleTimer(message:Message) : void
    - {static} HandleTimesUp(message:Message) : void
    - {static} HandleStartGame(message:Message) : void
    - {static} HandleLobbyExit(message:Message) : void
}
class NetworkManager <<static>> {
    + {static} IsHost : bool <<get>>
    + {static} IsClientConnected : bool <<get>>
    + {static} Initialize() : void
    + {static} StartGame(minutes:int) : void
    + {static} StartServer(info:ConnectionInfo) : void
    + {static} ConnectToServer(info:ConnectionInfo, nickname:string) : void
    + {static} Update() : void
}
class "Dictionary`2"<T1,T2> {
}
class Client <<static>> {
    + {static} IsConnected : bool
    - {static} _clientNickname : string = "DefaultNickname"
    + {static} Init() : void
    - {static} OnServerConnected(sender:object?, args:EventArgs) : void
    - {static} OnServerDisconnected(sender:object?, args:DisconnectedEventArgs) : void
    - {static} OnClientDisconnected(sender:object?, args:ClientDisconnectedEventArgs) : void
    + {static} Connect(info:ConnectionInfo, nickname:string) : void
    + {static} IsConnectedToServer : bool <<get>>
}
class Server <<static>> {
    + {static} IsHosted : bool
    + {static} Init() : void
    + {static} Start() : void
    + {static} Close() : void
    + {static} ServerIsRunning() : bool
}
NetworkManager o-> "Players<ushort,Player>" "Dictionary`2"
NetworkManager +-- Client
NetworkManager +-- Server
Server o-> "ConnectionInfo" ConnectionInfo
class ChatPanel {
    + DisableInput : bool = false
    - _text : string
    + {static} AddMessage(nickname:string, text:string) : void
    + {static} AddToLastMessage(value:string) : void
    + {static} ClearChat() : void
    + OnImGuiUpdate(flags:ImGuiWindowFlags) : void
}
class "List`1"<T> {
}
ChatPanel o-> "_chat<string>" "List`1"
class StatPanel <<static>> {
    + {static} OnImGuiUpdate(flags:ImGuiWindowFlags) : void
}
class ToolPanel {
    - _selectedIndex : int = 0
    - _currentSize : int
    + ToolPanel()
    + OnImGuiUpdate(flags:ImGuiWindowFlags) : void
}
class GameScreen {
    - _viewportFocused : bool
    - _viewportHovered : bool
    - {static} _minutes : int
    + GameScreen(minutes:int)
    + GameScreen()
    + {static} NewRound() : void
    - {static} SkipWord() : void
    - {static} WordGuessed() : void
    + <<override>> OnUpdate(deltaTime:float) : void
    + <<override>> OnImGuiUpdate() : void
}
Screen <|-- GameScreen
GameScreen o-> "_viewportSize" Vector2
GameScreen o-> "_chatPanel" ChatPanel
GameScreen o-> "_toolPanel" ToolPanel
GameScreen o-> "CursorOffset" Vector2
class MenuScreen {
    - _nickname : string = "Player"
    + <<override>> OnImGuiUpdate() : void
}
Screen <|-- MenuScreen
MenuScreen o-> "_connectionInfo" ConnectionInfo
abstract class Screen {
    + <<virtual>> OnUpdate(deltaTime:float) : void
    + <<virtual>> OnImGuiUpdate() : void
    + <<virtual>> OnEvent() : bool
}
class ScreenManager <<static>> {
    - {static} _captureEvents : bool = true
    - {static} _currentScreen : Screen?
    + {static} CurrentScreen : Screen? <<get>>
    + {static} NavigateTo(newScreen:Screen) : void
    + {static} OnEsc() : void
    + {static} OnUpdate(deltaTime:float) : void
    + {static} OnUpdateImGui() : void
    + {static} OnEvent() : bool
}
class ConnectionWindow <<static>> {
    + {static} IsVisible : bool
    + {static} OnImGuiUpdate(nickname:string, connectionInfo:ConnectionInfo) : void
    - {static} Connect(info:ConnectionInfo, nickname:string) : void
}
class LeaderBoardWindow <<static>> {
    + {static} IsVisible : bool
    + {static} OnImGuiUpdate() : void
}
class LobbyWindow <<static>> {
    + {static} IsVisible : bool
    - {static} _minutes : int = 1
    + {static} Clear() : void
    + {static} OnImGuiUpdate() : void
}
class "List`1"<T> {
}
LobbyWindow o-> "_watchersNames<string>" "List`1"
class MenuBar <<static>> {
    + {static} OnImGuiUpdate(additionalMenu:Action?, exitName:string, onExit:Action?) : void
}
enum MessageBoxButtons {
    YesNo,
    Ok,
}
enum MessageBoxResult {
    None,
    Ok,
    Yes,
    No,
}
class MessageBox <<static>> {
    - {static} _open : bool
    - {static} _title : string = "MessageBox"
    - {static} _message : string = "Message"
    - {static} _onResult : Action<MessageBoxResult>?
    + {static} IsOpen() : bool
    + {static} Show(title:string, message:string, buttons:MessageBoxButtons, onResult:Action<MessageBoxResult>?) : void
    + {static} OnImGuiUpdate() : void
    - {static} Button(button:MessageBoxResult) : void
}
MessageBox --> "_buttons" MessageBoxButtons
class ServerCreationWindow <<static>> {
    + {static} IsVisible : bool
    + {static} OnImGuiUpdate(nickname:string, connectionInfo:ConnectionInfo) : void
    - {static} Create(info:ConnectionInfo, nickname:string) : void
}
enum Resolutions {
    _1280x720,
    _960x480,
}
class SettingsData <<static>> {
}
class SettingsIni <<static>> {
    - {static} _filePath : string
    + {static} Init(fileName:string) : void
    + {static} Load() : void
    + {static} AddData(name:string, data:string) : void
    + {static} GetData(name:string) : string
}
class SettingsWindow <<static>> {
    + {static} IsVisible : bool
    + {static} OnImGuiUpdate() : void
}
class "Dictionary`2"<T1,T2> {
}
SettingsData o-> "_resolution" Resolutions
SettingsData --> "Resolution" Resolutions
SettingsData o-> "WindowFlags" ImGuiWindowFlags
SettingsIni o-> "_data" IniData
SettingsIni o-> "_parser" FileIniDataParser
SettingsIni o-> "Default<string,string>" "Dictionary`2"
@enduml
